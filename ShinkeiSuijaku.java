/*
神経衰弱

神経衰弱と呼ばれるトランプゲームのシミュレーションをしましょう。

シンプルにするために、トランプには数字のみ書かれているものと考えます。 また、トランプを縦 H 枚、横 W 枚の長方形の形に並べた状態でスタートすることにします。 ここで、H × W 枚のトランプには 1 〜 13 の数字のうちどれか1つが書かれています。 また、複数のトランプに同じ数字が書かれていることがあります。

プレイヤーが N 人おり、それぞれ 1 〜 N で番号付けられているものとします。 ゲームが始まると、1番の人から以下の手順でプレイしていきます。

・任意の2枚のトランプを捲る。
・捲った2枚のトランプに異なる数字が書かれていれば、次のプレイヤーの手番となる。そうでなければ、以下の操作を行う。
・2枚のトランプを取り除き、自分のものとする。
・トランプが全て取り除かれていれば、ゲームを終了する。
・手順の先頭に戻る。

取り除かれたカード以外は間を詰めるなど初期状態から移動することはありません。

ここで、N 番のプレイヤーの次のプレイヤーは 1 番のプレイヤーであるとします。

ゲームの初期状態におけるトランプの配置と、 ゲームが終わるまでに捲られたトランプに関する時系列順の記録が与えられます。
その記録を用いて、各プレイヤーが取り除いたトランプの枚数を求めてください。

入力される値
    入力は以下のフォーマットで与えられます。

        H W N
        t_{1,1} t_{1,2} ... t_{1,W}
        t_{2,1} t_{2,2} ... t_{2,W}
        ...
        t_{H,1} t_{H,2} ... t_{H,W}
        L
        a_1 b_1 A_1 B_1
        a_2 b_2 A_2 B_2
        ...
        a_L b_L A_L B_L


    1行目には3つの整数 H, W, Nが入力されます。 H と W はそれぞれ並べられたトランプの縦方向の枚数と横方向の枚数で、 N はプレイヤーの数を表します。

    続く H 行には、配置されたトランプに書かれた数字が入力されます。 t_{i,j} は i 行 j 列に置かれたトランプに書かれた数字を表します。

    次の行には、記録の長さ L が与えられます。

    続く L 行には、捲られたトランプの記録が時系列順で与えられます。 これは、a_i 行 b_i 列のトランプと A_i 行 B_i 列のトランプが捲られたことを表します。

期待する出力
    各プレイヤーが取り除いたトランプの枚数を以下の形式で出力してください。

        s_1
        s_2
        ...
        s_N

    s_i は i 番目のプレイヤーが取り除いたトランプの枚数を表します。 


入力例1

2 2 2
1 2
2 1
4
1 1 2 1
1 1 1 2
1 1 2 2
1 2 2 1

出力例1

4
0

入力例2

2 5 3
5 8 8 6 3
3 6 3 3 5
8
1 4 2 2
1 3 2 1
2 4 2 3
1 3 1 5
2 5 1 1
2 1 1 2
1 5 2 1
1 2 1 3

出力例2

6
2
2

*/
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int[][] t = new int[H][W];
        int[] s = new int[N];
        int l = 0;
        
        for(int i=0; i<H; i++){
            for(int j=0; j<W; j++){
                t[i][j] = sc.nextInt();
            }
        }
        int L = sc.nextInt();
        int[] a = new int[L];
        int[] b = new int[L];
        int[] A = new int[L];
        int[] B = new int[L];
        
        for(int k=0; k<L; k++){
            a[k] = sc.nextInt();
            b[k] = sc.nextInt();
            A[k] = sc.nextInt();
            B[k] = sc.nextInt();
        }
        for(int k=0; k<L; k++){
            int a1 = a[k]-1;
            int b1 = b[k]-1;
            int A1 = A[k]-1;
            int B1 = B[k]-1;
            if(t[a1][b1] == t[A1][B1]){
                s[l] += 2;
            }else{
                if(l==N-1){
                    l = 0;
                }else{
                    l++;
                } 
            }
        }
        for(int m=0; m<N; m++){
            System.out.println(s[m]);
        }
    }
}