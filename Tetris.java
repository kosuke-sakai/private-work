/*
落ちものシミュレーション

プログラミングが大好きなあなたは、自作の落ちものゲームを開発することにしました。 ゲームの仕様は次のようになっています。

・ゲームは縦幅 H、横幅 W の長方形のフィールドで行われます。
・ゲームが始まると、様々なサイズの長方形がフィールドの上方から一つずつ順番に落ちてきます。
・落ちてくる長方形の直下に他の長方形もしくはフィールドの底辺がある場合、接触したとみなして長方形の位置は固定されます。
手始めに、上記の仕様に従って落ちてくる長方形の動きをシミュレーションしましょう。
N 個の長方形が落ちてきた後のフィールドの状態を表示するプログラムを書いてください。

入力される値

        H W N
        h_1 w_1 x_1
        h_2 w_2 x_2
        ...
        h_N w_N x_N

    ・1 行目には 3 つの整数 H, W, N がこの順に半角スペース区切りで与えられます。
    　H はフィールドの縦幅を、W はフィールドの横幅を、 N は落ちてくる長方形の個数を表します。
    ・続く N 行のうち i 行目 (1 ≦ i ≦ N) には i 番目に落ちてくる長方形のサイズと落ちてくる位置の情報が入力されます。
    　ここではこの長方形の縦幅 h_i、横幅 w_i、長方形の左端とフィールドの左端の距離 x_i がこの順に半角スペース区切りで与えられます (問題文中の図を参照)。

期待する出力
    N 個の長方形がすべて落ちた後のフィールドの状態を、以下のフォーマットで出力してください。

        f_1
        f_2
        ...
        f_H


    ・期待する出力は H 行からなります。
    ・出力の i 行目 (1 ≦ i ≦ H) にフィールドの上端から距離 i の各地点の状態を表す長さ W の文字列 f_i を出力してください。
    　　f_i の j 番目 (1 ≦ j ≦ W) の文字は、フィールドの上端、左端からの距離が i, j となる地点の状態を表し、ここにブロックがあるときは "#"、ないときは "." となります。


入力例1

7 10 4
1 8 1
4 1 5
1 6 2
2 2 0

出力例1

..........
..######..
.....#....
.....#....
##...#....
##...#....
.########.

入力例2

10 10 9
2 2 4
2 2 3
2 2 5
2 2 2
2 2 6
2 2 1
2 2 7
2 2 0
2 2 8

出力例2

##......##
##......##
.##....##.
.##....##.
..##..##..
..##..##..
...####...
...####...
....##....
....##....

*/

import java.util.*;

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int[] h = new int[N];
        int[] w = new int[N];
        int[] x = new int[N];
        String[][] f = new String[H][W];
        
        for(int a=0; a<H; a++){
            for(int b=0; b<W; b++){
                f[a][b] = ".";
            }
        }
        for(int i=0; i<N; i++){
            h[i] = sc.nextInt();
            w[i] = sc.nextInt();
            x[i] = sc.nextInt();
        }
        for(int i=0; i<N; i++){
            outside: for(int a=0; a<H; a++){
                for(int b=x[i]; b<w[i]+x[i]; b++){
                    if(f[a][b].equals("#")){
                        for(int A=0; A<h[i]; A++){
                            for(int B=x[i]; B<w[i]+x[i]; B++){
                                f[a-1-A][B] = "#";
                            }
                        }
                        break outside;
                    }else if(a==H-1 && b==w[i]+x[i]-1){
                        for(int A=H-h[i]; A<H; A++){
                            for(int B=x[i]; B<w[i]+x[i]; B++){
                                f[A][B] = "#";
                            }
                        }
                    }
                }
            }
        }
        for(int a=0; a<H; a++){
            for(int b=0; b<W; b++){
                System.out.print(f[a][b]);
            }
            System.out.println();
        }
    }
}